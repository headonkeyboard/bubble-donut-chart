[{"/Users/asimon/Projets/react-bubble-donut/src/App.tsx":"1","/Users/asimon/Projets/react-bubble-donut/src/BubbleDonutChart.tsx":"2","/Users/asimon/Projets/react-bubble-donut/src/index.tsx":"3","/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/coords.utils.ts":"4","/Users/asimon/Projets/react-bubble-donut/src/lib/core/random.utils.ts":"5","/Users/asimon/Projets/react-bubble-donut/src/lib/core/bubble-donut.ts":"6","/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/bubble.utils.ts":"7","/Users/asimon/Projets/react-bubble-donut/src/reportWebVitals.ts":"8","/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilder.tsx":"9","/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilderSection.tsx":"10"},{"size":2293,"mtime":1609147183594,"results":"11","hashOfConfig":"12"},{"size":3802,"mtime":1609101156678,"results":"13","hashOfConfig":"12"},{"size":500,"mtime":1608815459637,"results":"14","hashOfConfig":"12"},{"size":3100,"mtime":1606905184000,"results":"15","hashOfConfig":"12"},{"size":821,"mtime":1609095543146,"results":"16","hashOfConfig":"12"},{"size":5712,"mtime":1609098614591,"results":"17","hashOfConfig":"12"},{"size":5140,"mtime":1608983583949,"results":"18","hashOfConfig":"12"},{"size":425,"mtime":1608815459641,"results":"19","hashOfConfig":"12"},{"size":3032,"mtime":1609099835822,"results":"20","hashOfConfig":"12"},{"size":1027,"mtime":1609100172732,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3f9vm1",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/asimon/Projets/react-bubble-donut/src/App.tsx",[],"/Users/asimon/Projets/react-bubble-donut/src/BubbleDonutChart.tsx",[],"/Users/asimon/Projets/react-bubble-donut/src/index.tsx",[],["44","45"],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/coords.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/random.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/bubble-donut.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/bubble.utils.ts",["46"],"import { Bubble, Coord, Grid, GridEdges, Point } from '../models/models';\nimport {\n  getGridPointPosition,\n  getDistance,\n  getMaxDistance,\n  getMinDistance,\n} from './coords.utils';\n\n/**\n * Return a bubble radius based on it's weight proportional to donutArea\n *\n * @param bubbleValue Bubble coefficient weight\n * @param donutArea Donut surface\n * @param totalBubbleValues Sum of all bubbles coefficient weight\n */\nconst getBubbleRadius = (\n  bubbleValue: number,\n  donutArea: number,\n  totalBubbleValues: number\n): number => {\n  const bubbleArea = (bubbleValue * donutArea) / totalBubbleValues;\n  return Math.sqrt(bubbleArea / Math.PI) * 0.7;\n};\n\n/**\n * Return sum of all bubble weight\n *\n * @param bubbles Array of bubble data\n */\nconst getAllBubbleWeightSum = (bubbles: Bubble[]): number => {\n  return bubbles.reduce((acc, bubble) => {\n    return acc + bubble.weight;\n  }, 0);\n};\n\n/**\n * Generate an array representing a donut section grid\n * Each item index is a grid coordinate\n * Each item value is equal to the minimum distance with an obstacle (edge or any other bubble)\n *\n * @param edges An array containing edges positions\n * @param gridLength The grid size\n * @param startAngle The section start angle in rad\n * @param endAngle The section end angle in rad\n * @param innerRadius The donut inner radius in pixels\n * @param outerRadius The donut outer radius in pixels\n * @param bubbleCoords Positions of bubbles already in grid\n */\nconst generateGrid = (\n  edges: GridEdges,\n  gridLength: number,\n  startAngle: number,\n  endAngle: number,\n  innerRadius: number,\n  outerRadius: number,\n  gridPointPositionsCache: Map<number, Point>,\n  grid: Grid = [],\n  bubbleCoords: Array<Coord> = []\n): {grid: Grid, maxDistance: number; maxDistanceX: number; maxDistanceY: number} => {\n  let maxDistance = 0;\n  let maxDistanceX = 0;\n  let maxDistanceY = 0;\n\n  for (let i = 0; i < Math.pow(gridLength, 2); i++) {\n    let minDistance = null != grid[i] ? grid[i] : null;\n\n    // skiping minDistance search when already low\n    if (null != minDistance && minDistance <= 0) {\n      continue;\n    }\n\n    const x = i % gridLength;\n    const y = i / gridLength;\n\n    let gridPointCoord!: Point;\n\n    if (gridPointPositionsCache.has(i)) {\n      gridPointCoord = gridPointPositionsCache.get(i) as Point;\n    }\n    else {\n      gridPointCoord = getGridPointPosition(\n          x,\n          y,\n          startAngle,\n          endAngle,\n          gridLength,\n          innerRadius,\n          outerRadius\n      );\n\n      gridPointPositionsCache.set(i, gridPointCoord);\n    }\n\n    // compute edge distance from grid point only for an empty grid\n    if (null === minDistance) {\n      // reduce edges list to potential closest edges\n      const closestEdges: Point[] = [];\n\n      if (y > Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.right);\n      } else if (y <= Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.left);\n      }\n\n      if (x > Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.top);\n      } else if (x <= Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.bottom);\n      }\n\n      minDistance = getMinDistance(closestEdges, gridPointCoord);\n    }\n\n    if (bubbleCoords.length > 0) {\n      const lastAddedBubble = bubbleCoords[bubbleCoords.length - 1];\n      const bubbleCoordDistance =\n          getDistance(gridPointCoord, lastAddedBubble) - lastAddedBubble.r;\n      if (minDistance && minDistance > bubbleCoordDistance) {\n        minDistance = bubbleCoordDistance;\n      }\n    }\n\n    if (minDistance > maxDistance) {\n      maxDistance = minDistance;\n      maxDistanceX = x;\n      maxDistanceY = y;\n    }\n\n    grid[i] = minDistance;\n  }\n\n  return {grid, maxDistance, maxDistanceX, maxDistanceY};\n};\n\n/**\n * Return bubble coordinates and radius in pixels\n *\n * @param gridLength The grid size\n * @param startAngle The section start angle in rad\n * @param endAngle The section end angle in rad\n * @param value The bubble value (the higher its value, the higher its radius)\n * @param grid An array in which each items is a grid point and is value is the closest distance with an obstacle (bubble or edge)\n * @param innerRadius The donut inner radius in pixels\n * @param outerRadius The donut outer radius in pixels\n * @param donutArea The computed area of the donut\n * @param totalBubbleValues The sum of all bubble value\n */\nconst getBubblePositionAndRadius = (\n  maxDistance: number,\n  maxDistanceCoords: Point,\n  value: number,\n  donutArea: number,\n  totalBubbleValues: number\n) => {\n  let bubbleRadius = getBubbleRadius(value, donutArea, totalBubbleValues);\n\n  if (maxDistance - bubbleRadius < 0) {\n    bubbleRadius = maxDistance - 2;\n  }\n\n  const offset = (maxDistance - bubbleRadius) / 2;\n\n  const offsetX = offset * (Math.random() < 0.5 ? -1 : 1);\n  const offsetY = offset * (Math.random() < 0.5 ? -1 : 1);\n\n  return {\n    bubbleX: maxDistanceCoords.x + offsetX * Math.random(),\n    bubbleY: maxDistanceCoords.y + offsetY * Math.random(),\n    bubbleR: bubbleRadius,\n  };\n};\n\nexport {\n  generateGrid,\n  getBubbleRadius,\n  getAllBubbleWeightSum,\n  getBubblePositionAndRadius\n};\n","/Users/asimon/Projets/react-bubble-donut/src/reportWebVitals.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilder.tsx",["47"],"/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilderSection.tsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":5,"column":3,"nodeType":"54","messageId":"55","endLine":5,"endColumn":17},{"ruleId":"56","severity":1,"message":"57","line":46,"column":8,"nodeType":"58","endLine":46,"endColumn":35,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'getMaxDistance' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'handleSectionChange'. Either include it or remove the dependency array.","ArrayExpression",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [handleSectionChange, sections.length]",{"range":"65","text":"66"},[1658,1685],"[handleSectionChange, sections.length]"]
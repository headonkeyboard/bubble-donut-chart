[{"/Users/asimon/Projets/react-bubble-donut/src/App.tsx":"1","/Users/asimon/Projets/react-bubble-donut/src/index.tsx":"2","/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/coords.utils.ts":"3","/Users/asimon/Projets/react-bubble-donut/src/lib/core/bubble-donut.ts":"4","/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/bubble.utils.ts":"5","/Users/asimon/Projets/react-bubble-donut/src/reportWebVitals.ts":"6","/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilder.tsx":"7","/Users/asimon/Projets/react-bubble-donut/src/utils/colors.utils.ts":"8","/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilderGroup.tsx":"9","/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/BubbleDonutChart.tsx":"10","/Users/asimon/Projets/react-bubble-donut/src/ui/Card.tsx":"11","/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/constants.ts":"12","/Users/asimon/Projets/react-bubble-donut/src/ui/builder/utils/bubble-donut-builder.utils.ts":"13","/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/utils/bubble-donut-d3-layout.utils.ts":"14","/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/raw-data.utils.ts":"15","/Users/asimon/Projets/react-bubble-donut/src/utils/random.utils.ts":"16","/Users/asimon/Projets/react-bubble-donut/src/bubble.worker.ts":"17"},{"size":2239,"mtime":1609426906341,"results":"18","hashOfConfig":"19"},{"size":500,"mtime":1609420701212,"results":"20","hashOfConfig":"19"},{"size":1869,"mtime":1609341073040,"results":"21","hashOfConfig":"19"},{"size":6664,"mtime":1609340246790,"results":"22","hashOfConfig":"19"},{"size":4672,"mtime":1609340246866,"results":"23","hashOfConfig":"19"},{"size":425,"mtime":1609162195685,"results":"24","hashOfConfig":"19"},{"size":3125,"mtime":1609600853102,"results":"25","hashOfConfig":"19"},{"size":250,"mtime":1609162195861,"results":"26","hashOfConfig":"19"},{"size":1443,"mtime":1609427754429,"results":"27","hashOfConfig":"19"},{"size":2623,"mtime":1609603289158,"results":"28","hashOfConfig":"19"},{"size":260,"mtime":1609325935885,"results":"29","hashOfConfig":"19"},{"size":241,"mtime":1609180530536,"results":"30","hashOfConfig":"19"},{"size":1476,"mtime":1609325935865,"results":"31","hashOfConfig":"19"},{"size":3363,"mtime":1609608146039,"results":"32","hashOfConfig":"19"},{"size":736,"mtime":1609340246921,"results":"33","hashOfConfig":"19"},{"size":1426,"mtime":1609607530441,"results":"34","hashOfConfig":"19"},{"size":442,"mtime":1609602676696,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"3f9vm1",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/asimon/Projets/react-bubble-donut/src/App.tsx",[],["79","80"],"/Users/asimon/Projets/react-bubble-donut/src/index.tsx",[],["81","82"],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/coords.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/bubble-donut.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/bubble.utils.ts",["83"],"import {\n  RawData,\n  Coord,\n  Grid,\n  GridEdges,\n  Point,\n  MaxDistancePoint,\n} from \"../models\";\nimport {\n  gridPointPositionToPixels,\n  getDistance,\n  getMinDistance,\n} from \"./coords.utils\";\n\n/**\n * Return a bubble radius based on it's weight proportional to donutArea\n *\n * @param bubbleValue RawData coefficient weight\n * @param donutArea Donut surface\n * @param totalBubbleValues Sum of all bubbles coefficient weight\n */\nconst getBubbleRadius = (\n  bubbleValue: number,\n  donutArea: number,\n  totalBubbleValues: number\n): number => {\n  const bubbleArea = (bubbleValue * donutArea) / totalBubbleValues;\n  return Math.sqrt(bubbleArea / Math.PI) * 0.7;\n};\n\n/**\n * Generate an array representing a donut section grid\n * Each item index is a grid coordinate\n * Each item value is equal to the minimum distance with an obstacle (edge or any other bubble)\n *\n * @param edges An array containing edges positions\n * @param gridLength The grid size\n * @param startAngle The section start angle in rad\n * @param endAngle The section end angle in rad\n * @param innerRadius The donut inner radius in pixels\n * @param outerRadius The donut outer radius in pixels\n * @param gridPointPositionsCache\n * @param grid\n * @param bubbleCoords Positions of bubbles already in grid\n */\nconst generateGrid = (\n  edges: GridEdges,\n  gridLength: number,\n  startAngle: number,\n  endAngle: number,\n  innerRadius: number,\n  outerRadius: number,\n  gridPointPositionsCache: Map<number, Point>,\n  grid: Grid = [],\n  bubbleCoords: Array<Coord> = []\n): {\n  grid: Grid;\n  maxDistancePoint: MaxDistancePoint;\n} => {\n  let maxDistance = 0;\n  let maxDistanceX = 0;\n  let maxDistanceY = 0;\n\n  for (let i = 0; i < Math.pow(gridLength, 2); i++) {\n    let minDistance = null != grid[i] ? grid[i] : null;\n\n    // skiping minDistance search when already low\n    if (null != minDistance && minDistance <= 0) {\n      continue;\n    }\n\n    const x = i % gridLength;\n    const y = Math.floor(i / gridLength);\n\n    let gridPointCoord!: Point;\n\n    if (gridPointPositionsCache.has(i)) {\n      gridPointCoord = gridPointPositionsCache.get(i) as Point;\n    } else {\n      gridPointCoord = gridPointPositionToPixels(\n        x,\n        y,\n        startAngle,\n        endAngle,\n        gridLength,\n        innerRadius,\n        outerRadius\n      );\n\n      gridPointPositionsCache.set(i, gridPointCoord);\n    }\n\n    // compute edge distance from grid point only for an empty grid\n    if (null === minDistance) {\n      // reduce edges list to potential closest edges\n      const closestEdges: Point[] = [];\n\n      if (y > Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.right);\n      } else if (y <= Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.left);\n      }\n\n      if (x > Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.top);\n      } else if (x <= Math.round(gridLength / 2)) {\n        closestEdges.push(...edges.bottom);\n      }\n\n      minDistance = getMinDistance(closestEdges, gridPointCoord);\n    }\n\n    if (bubbleCoords.length > 0) {\n      const lastAddedBubble = bubbleCoords[bubbleCoords.length - 1];\n      const bubbleCoordDistance =\n        getDistance(gridPointCoord, lastAddedBubble) - lastAddedBubble.r;\n      if (minDistance && minDistance > bubbleCoordDistance) {\n        minDistance = bubbleCoordDistance;\n      }\n    }\n\n    if (minDistance > maxDistance) {\n      maxDistance = minDistance;\n      maxDistanceX = x;\n      maxDistanceY = y;\n    }\n\n    grid[i] = minDistance;\n  }\n\n  return {\n    grid,\n    maxDistancePoint: {\n      maxDistance,\n      x: maxDistanceX,\n      y: maxDistanceY,\n    },\n  };\n};\n\n/**\n * Return bubble coordinates and radius in pixels\n *\n * @param maxDistance\n * @param maxDistanceCoords\n * @param value The bubble value (the higher its value, the higher its radius)\n * @param donutArea The computed area of the donut\n * @param totalBubbleValues The sum of all bubble value\n */\nconst getBubblePositionAndRadius = (\n  maxDistance: number,\n  maxDistanceCoords: Point,\n  value: number,\n  donutArea: number,\n  totalBubbleValues: number\n) => {\n  let bubbleRadius = getBubbleRadius(value, donutArea, totalBubbleValues);\n\n  if (maxDistance - bubbleRadius < 0) {\n    bubbleRadius = maxDistance - 1;\n  }\n\n  const offset = (maxDistance - bubbleRadius) / 2;\n\n  const offsetX = offset * (Math.random() < 0.5 ? -1 : 1);\n  const offsetY = offset * (Math.random() < 0.5 ? -1 : 1);\n\n  return {\n    bubbleX: maxDistanceCoords.x + offsetX * Math.random(),\n    bubbleY: maxDistanceCoords.y + offsetY * Math.random(),\n    bubbleR: bubbleRadius >= 0 ? bubbleRadius : 1,\n  };\n};\n\nexport { generateGrid, getBubbleRadius, getBubblePositionAndRadius };\n",["84","85"],"/Users/asimon/Projets/react-bubble-donut/src/reportWebVitals.ts",[],["86","87"],"/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilder.tsx",[],"/Users/asimon/Projets/react-bubble-donut/src/utils/colors.utils.ts",[],["88","89"],"/Users/asimon/Projets/react-bubble-donut/src/ui/builder/BubbleDonutBuilderGroup.tsx",[],"/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/BubbleDonutChart.tsx",[],"/Users/asimon/Projets/react-bubble-donut/src/ui/Card.tsx",[],["90","91"],"/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/constants.ts",[],["92","93"],"/Users/asimon/Projets/react-bubble-donut/src/ui/builder/utils/bubble-donut-builder.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/ui/bubble-donut-chart/utils/bubble-donut-d3-layout.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/lib/core/utils/raw-data.utils.ts",[],["94","95"],"/Users/asimon/Projets/react-bubble-donut/src/utils/random.utils.ts",[],"/Users/asimon/Projets/react-bubble-donut/src/bubble.worker.ts",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"96","replacedBy":"100"},{"ruleId":"98","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":3,"nodeType":"104","messageId":"105","endLine":2,"endColumn":10},{"ruleId":"96","replacedBy":"106"},{"ruleId":"98","replacedBy":"107"},{"ruleId":"96","replacedBy":"108"},{"ruleId":"98","replacedBy":"109"},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","replacedBy":"111"},{"ruleId":"96","replacedBy":"112"},{"ruleId":"98","replacedBy":"113"},{"ruleId":"96","replacedBy":"114"},{"ruleId":"98","replacedBy":"115"},{"ruleId":"96","replacedBy":"116"},{"ruleId":"98","replacedBy":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],["118"],["119"],"@typescript-eslint/no-unused-vars","'RawData' is defined but never used.","Identifier","unusedVar",["118"],["119"],["118"],["119"],["118"],["119"],["118"],["119"],["118"],["119"],["118"],["119"],"no-global-assign","no-unsafe-negation"]